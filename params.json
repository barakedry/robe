{"name":"Robe","tagline":"MongoDB ODM for Node.js using ES6 generators. Supports schema validation, raw querying, cursors, etc.","body":"# Robe\r\n\r\n[![Build Status](https://secure.travis-ci.org/hiddentao/robe.png?branch=master)](http://travis-ci.org/hiddentao/robe) [![NPM module](https://badge.fury.io/js/robe.png)](https://badge.fury.io/js/robe)\r\n\r\n**Robe** wraps around [monk](https://github.com/Automattic/monk) to provide a \r\nsimple yet effective ODM library for MongoDB. \r\n\r\nFeatures:\r\n\r\n* Work with ODM-style documents or raw Mongo data - the choice is yours\r\n* Add before and after hooks for inserts, updates and removals\r\n* Cursor mode (for streaming results)\r\n* Schema validation ([simple-mongo-schema](https://github.com/hiddentao/simple-mongo-schema)).\r\n* Replica sets supported\r\n* [and more...](https://hiddentao.github.io/robe)\r\n\r\n## Examples\r\n\r\nDetailed documentation is available at [https://hiddentao.github.io/robe](https://hiddentao.github.io/robe).\r\n\r\n**The basics**\r\n\r\n```js\r\n\"use strict\";\r\n\r\nvar robe = require('robe');\r\n\r\n// connect to db\r\nvar db = yield robe.connect('127.0.0.1');\r\n\r\n// get a collection\r\nvar collection = db.collection('test');\r\n\r\n// insert a record\r\nyield collection.insert({\r\n  name: 'jim',\r\n  age: 23\r\n});\r\n\r\n// find it\r\nvar item = yield collection.findOne({\r\n  name: 'jim'\r\n});\r\n\r\nconsole.log(item instanceof robe.Document); // true\r\nconsole.log(Object.keys(item)); // _id, name, age\r\n\r\n// update\r\nitem.age = 54;\r\nyield item.save();    // internally calls collection.update(...)\r\n\r\n// remove\r\nyield item.remove();  // internally calls collection.remove(...)\r\n```\r\n\r\n**Raw querying mode**\r\n\r\nIn this mode we won't make use of `robe.Document` and will instead deal \r\ndirectly with Mongo data objects.\r\n\r\n```js\r\n// insert a record\r\nyield collection.insert({\r\n  name: 'jim',\r\n  age: 23\r\n});\r\n\r\n// find it\r\nvar item = yield collection.findOne({\r\n  name: 'jim'\r\n}, {\r\n  raw: true // return the raw mongo object\r\n});\r\n\r\nconsole.log(item instanceof robe.Document); // false\r\nconsole.log(Object.keys(item)); // _id, name, age\r\n\r\n// update\r\nyield collection.update({\r\n  _id: item._id\r\n}, {\r\n  $set: {\r\n    age: 54\r\n  }\r\n});\r\n\r\n// remove\r\nyield collection.remove({\r\n  _id: item._id\r\n});\r\n```\r\n\r\nYou can also enable `raw` querying at the collection level:\r\n\r\n```js\r\nvar collection = db.collection('test', {\r\n  raw: true\r\n});\r\n\r\nyield collection.findOne({\r\n  name: 'john'\r\n}, {\r\n  raw: false  // override the collection-level setting\r\n});\r\n```\r\n\r\n**Hooks**\r\n\r\nYou can add multiple `before` and `after` hooks for insertions, updates and \r\nremovals. Hooks get triggered even when calling the `save()` and `remove()` \r\nmethods on a `robe.Document` instance.\r\n\r\n```js\r\ncollection.before('remove', function*(search, next) {\r\n  console.log('Before hook');\r\n\r\n  search.age = 54;  \r\n\r\n  console.log(JSON.stringify(search));\r\n\r\n  yield next;\r\n});\r\n\r\ncollection.after('remove', function*(search, result, next) {\r\n  console.log('After hook: ' + result);\r\n\r\n  yield next;\r\n});\r\n\r\n// remove\r\nyield collection.remove({\r\n  name: 'john'\r\n});\r\n\r\n/*\r\nOuptut:\r\n \r\n Before hook\r\n { name: 'john', age: 54 }\r\n After hook: 1\r\n*/\r\n```\r\n\r\n**Schema validation**\r\n\r\nSchema definitions are as supported by [simple-mongo-schema](https://github.com/hiddentao/simple-mongo-schema). \r\nInserts and updates trigger schema validation checks. Any keys not specified in the schema \r\nget ignored during validation, i.e. a schema can be a partial definition of a document.\r\n\r\n```js\r\n// get a collection\r\nvar collection = db.collection('test', {\r\n  schema: {\r\n    name: {\r\n      type: String\r\n    },\r\n    isMarried: {\r\n      type: Boolean\r\n    },\r\n    numCars: {\r\n      type: Number\r\n    },\r\n  }  \r\n});\r\n\r\n// insert a record\r\ntry {\r\n  yield collection.insert({\r\n    name: 'jim',\r\n    hasKids: true,\r\n    isMarried: 'yes',\r\n    numCars: '20'\r\n  });\r\n} catch (err) {\r\n\r\n  console.log(err);\r\n\r\n  /*\r\n    Error: Validation failed\r\n  */\r\n\r\n\r\n  console.log(err.failures); \r\n\r\n  /*\r\n    [\r\n      \"/isMarried: must be true or false\",\r\n      \"/numCars: must be a number\",\r\n    ]  \r\n  */\r\n}\r\n```\r\n\r\n\r\n## Building\r\n\r\nTo run the tests:\r\n\r\n    $ npm install -g gulp\r\n    $ npm install\r\n    $ npm test\r\n\r\n## Contributing\r\n\r\nContributions are welcome! Please see [CONTRIBUTING.md](https://github.com/hiddentao/robe/blob/master/CONTRIBUTING.md).\r\n\r\n## Inspiration and thanks\r\n\r\n* [mongoose](http://mongoosejs.com)\r\n* [mongorito](http://mongorito.com/)\r\n* [Meteor](docs.meteor.com/#/full/collections)\r\n\r\n## License\r\n\r\nMIT - see [LICENSE.md](https://github.com/hiddentao/robe/blob/master/LICENSE.md)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}